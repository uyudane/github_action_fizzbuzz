# ワークフロー名 省略した場合は、ファイルへの相対パスがワークフロー名になる
name: Coutinuous Integration
# 契機
on: push

jobs:
  unit-test: # jobID
    name: Unit Test # job名
    runs-on: ubuntu-latest # 実行されるマシン環境
    steps:
      - name: Checkout #ファイルをチェックアウト
        # https://github.com/actions/checkout
        uses: actions/checkout@v2.0.0
      - name: Set Node.js 12.x # nodeをセットアップ
        # https://github.com/actions/setup-node
        uses: actions/setup-node@v3
        with:
          node-version: 12.x
      - name: Get NPM cache directory
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache NPM
        uses: actions/cache@v1.1.0
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        # npm install より高速に動作し、CIで必要なことだけを行うのが npm ci コマンド
        # npm ci は package.json の依存関係の解決を行わず、
        # npm install コマンドを使うと、 package.json を変えていなくても npm のバージョンが違っていれば package-lock.json は変更されてしまいます。
        # 更には、 package.json を変えたのに package-lock.json をコミットし忘れてしまったといった場合にCIで気づくことができません。
        # 常に package-lock.json を見て依存パッケージをダウンロードし node_modules の洗い替えを行う
        # https://qiita.com/mstssk/items/8759c71f328cab802670
        run: npm ci # ciをインストール
      - name: Test
        run: npm test # テストを実行
  lint: # jobID
    name: Lint # job名
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.0.0 # チェックアウト
      - name: Set Node.js 12.x
        uses: actions/setup-node@v3 # セットアップ
        with:
          node-version: 12.x
      - name: Get NPM cache directory
        id: npm-cache
        # NPM のキャッシュディレクトリを 取得してアウトプットに格納
        # Linux しかビルドしな いということであれば Linux のパス(~/.npm)に決め打ちしてしまっても問題ないと思いますが、
        # 互換性を保つためにコマンド経由で取得するほうが安全
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache NPM
        # その時点で key に指定したキーに完全一致するキャッシュが存在するときは、path で指定したファイルパスに復元
        # key で指定したキーでキャッシュが存在しない場合は、restore-keys で指定し たキーに前方一致するキーを持つキャッシュが復元
        # ジョブの最後に指定したキーで 指定したファイルパスの内容がキャッシュとして保存されるようになります。
        # すでに 同じキーでキャッシュが存在するときは保存されず、キャッシュの上書きは行われま せん。
        uses: actions/cache@v1.1.0
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          # ${{ runner.os }} でジョブ実行環境の OS を取得
          # (飛ばしちゃったけど書籍では)OS でマトリクスビルドを行っており、NPM のキャッ シュする内容は OS によって異なってくる可能性があるため
          # lock.jsonのハッシュファイルでキーを割り出しているね！
          # このリポジトリにはルートディレクトリにしか package-lock.json が存在しない ので **/ は必要ないですが、
          # リポジトリ内で複数のモジュールを管理するケースを考えて全ディレクトリの package-lock.json を指定しています。
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
